{"version":3,"sources":["components.js","util.js","index.js"],"names":["Square","props","className","onClick","value","Row","rowIndex","width","squares","cols","colIndex","squareIndex","push","key","Board","boardDimensions","height","rows","rowBegin","rowEnd","slice","Status","isGameEnded","isStepNumberEven","Step","sliceIndex","Steps","moves","map","_","idx","sumArrays","a1","a2","mul","e","i","doesArrayIncludeSubArray","arrayOfArrays","subArray","some","elementArray","every","directionToTupleMappings","horizontal","vertical","diagonal","antiDiagonal","isPointValid","point","getTupleForMove","move","Math","floor","board","getPlayerMovesAsTuples","forX","movesAsTuples","length","getSquaresFromMoves","stepNumber","Array","fill","xIsNext","checkWinForDirection","target","direction","delta","lastMove","endPoints","finalEndPoints","numElements","multiplier","Game","validateProps","state","winningEndpoints","this","numElementsRequiredForWin","max","Object","values","min","RangeError","lastPlayerMoves","util","endpoints","setState","movesUntilStep","includes","checkWin","handleClick","jumpTo","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e4f38d6f.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nfunction Row(props) {\n  const {rowIndex, width, squares, onClick} = props,\n        cols = [];\n  for (let colIndex = 0; colIndex < width; colIndex++) {\n    const squareIndex = rowIndex * width + colIndex;\n    cols.push(\n      <Square\n        key={colIndex}\n        value={squares[colIndex]}\n        onClick={() => onClick(squareIndex)}\n      />\n    );\n  }\n  return (\n    <div className=\"board-row\" key={rowIndex}>\n      {cols}\n    </div>\n  );\n}\n\nfunction Board(props) {\n  const {boardDimensions: {width, height}, squares, onClick} = props,\n        rows = [];\n  for (let rowIndex = 0; rowIndex < height; rowIndex++) {\n    const rowBegin = rowIndex * width,\n          rowEnd = rowBegin + width;\n    rows.push(\n      <Row\n        key={rowIndex}\n        /*\n         * What's going on below? As we can understand from the first\n         * pair of curly braces (which are rendered as blue with syntax\n         * highlighting), we are inlining a block of JavaScript code in\n         * JSX. But what are we inlining? We are declaring a JavaScript\n         * object (inline declaration using the inner curly braces), and\n         * spreading this inline declared object immediately. One\n         * interesting part of the object is that we are using \"object\n         * shorthand\" syntax in order to prevent repetition in the\n         * declaration. This way, we are preventing repetitive prop\n         * declaration. If we didn't do it this way, we would have\n         * needed to do it as follows:\n         *\n         *     rowIndex={rowIndex}\n         *     width={width}\n         *     squares={squares.slice(rowBegin, rowEnd)}\n         *     onClick={onClick}\n         *\n         * Which is repetitive.\n         */\n        {\n          ...{\n            rowIndex,\n            width,\n            squares: squares.slice(rowBegin, rowEnd),\n            onClick,\n          }\n        }\n      />\n    );\n  }\n  return (\n    <div>\n      {rows}\n    </div>\n  );\n}\n\nfunction Status(props) {\n  const {isGameEnded, isStepNumberEven} = props;\n  return (\n    <div>\n      {\n        isGameEnded\n        ?\n        `Winner: ${isStepNumberEven ? 'O' : 'X'}`\n        :\n        `Next player: ${isStepNumberEven ? 'X' : 'O'}`\n      }\n    </div>\n  );\n}\n\nfunction Step(props) {\n  const {sliceIndex, onClick} = props;\n  return (\n    <li key={sliceIndex}>\n      <button onClick={() => onClick(sliceIndex)}>\n        {\n          sliceIndex\n          ?\n          'Go to move #' + sliceIndex\n          :\n          'Go to game start'\n        }\n      </button>\n    </li>\n  );\n}\n\nfunction Steps(props) {\n  const {moves, onClick} = props;\n  return (\n    <ol>\n      <Step\n        key={0}\n        sliceIndex={0}\n        onClick={onClick}\n      />\n      {\n        moves.map((_, idx) => {\n          const sliceIndex = idx + 1;\n          return (\n            <Step\n              key={sliceIndex}\n              {...{sliceIndex, onClick}}\n            />\n          );\n        })\n      }\n    </ol>\n  );\n}\n\nexport {Board, Status, Steps}\n","// Array\nfunction sumArrays(a1, a2, mul) {\n  return a1.map((e, i) => e + mul * a2[i]);\n}\n\nfunction doesArrayIncludeSubArray(arrayOfArrays, subArray) {\n  return arrayOfArrays.some(\n           elementArray => subArray.every(\n                             (e, i) => e === elementArray[i]\n                           )\n         );\n}\n\n// Board\nconst directionToTupleMappings = {\n        horizontal: [1, 0],\n        vertical: [0, 1],\n        diagonal: [1, 1],\n        antiDiagonal: [-1, 1],\n      };\n\nfunction isPointValid(point, boardDimensions) {\n  const {width, height} = boardDimensions;\n  return (\n    !(point[0] < 0) && (point[0] < width)\n    &&\n    !(point[1] < 0) && (point[1] < height)\n  );\n}\n\n/*\n * Returns [rowIndex, columnIndex] representation of a regular array\n * index, where the array represents a matrix (that is, a\n * two-dimensional array).\n */\nfunction getTupleForMove(move, boardDimensions) {\n  const {width} = boardDimensions;\n  return [move % width, Math.floor(move / width)];\n}\n\nfunction getPlayerMovesAsTuples(moves, boardDimensions, forX = true) {\n  const movesAsTuples = [];\n  for (let i = forX ? 0 : 1; i < moves.length; i+=2) {\n    movesAsTuples.push(getTupleForMove(moves[i], boardDimensions));\n  }\n  return movesAsTuples;\n}\n\nfunction getSquaresFromMoves(boardDimensions, stepNumber, moves) {\n  const {width, height} = boardDimensions,\n        squares = new Array(width * height).fill(null);\n  let xIsNext = true;\n  for (let i = 0; i < stepNumber; i++) {\n    squares[moves[i]] = xIsNext ? 'X' : 'O';\n    xIsNext = !xIsNext;\n  }\n  return squares;\n}\n\nfunction checkWinForDirection(moves, target, boardDimensions, direction) {\n  const delta = directionToTupleMappings[direction],\n        lastMove = moves[moves.length - 1],\n        endPoints = [sumArrays(lastMove, delta, -1),\n                     sumArrays(lastMove, delta, 1)],\n        finalEndPoints = [];\n  let numElements = 1;\n  for (let idx = 0; idx < endPoints.length; idx++) {\n    let point = endPoints[idx],\n        multiplier = (idx === 0 ? -1 : 1);\n    while (isPointValid(point, boardDimensions)\n           && doesArrayIncludeSubArray(moves, point)\n    ) {\n      numElements++;\n      point = sumArrays(point, delta, multiplier);\n    }\n    finalEndPoints[idx] = point;\n  }\n  if (numElements === target) return finalEndPoints;\n}\n\nexport default {\n  board: {\n    directionToTupleMappings,\n    getPlayerMovesAsTuples,\n    getSquaresFromMoves,\n    checkWinForDirection,\n  },\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Board, Status, Steps} from './components';\nimport util from './util';\nimport './index.css';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.validateProps();\n    this.state = {\n      // Array of indices. The indices refer to an array that\n      // represents the game board (that is, a matrix).\n      moves: [],\n      stepNumber: 0,\n      // Array of tuples (a tuple is an array of two elements).\n      winningEndpoints: [],\n    };\n  }\n\n  validateProps() {\n    const {numElementsRequiredForWin, boardDimensions} = this.props;\n    if (\n      Math.max(...Object.values(numElementsRequiredForWin))\n      >\n      Math.min(...Object.values(boardDimensions))\n    ) {\n      throw new RangeError(\"Number of elements required to win \" +\n                           \"cannot be bigger than board dimensions.\");\n    }\n  }\n\n  checkWin() {\n    const {moves} = this.state,\n          {numElementsRequiredForWin, boardDimensions} = this.props,\n          lastPlayerMoves = util.board.getPlayerMovesAsTuples(\n                              moves,\n                              boardDimensions,\n                              moves.length % 2 !== 0\n                            ),\n          winningEndpoints = [];\n    numElementsRequiredForWin.antiDiagonal\n      = numElementsRequiredForWin.diagonal;\n    for (const direction in util.board.directionToTupleMappings) {\n      const endpoints = util.board.checkWinForDirection(\n        lastPlayerMoves,\n        numElementsRequiredForWin[direction],\n        boardDimensions,\n        direction\n      );\n      if (endpoints) winningEndpoints.push(endpoints);\n    }\n    this.setState({winningEndpoints});\n  }\n\n  isGameEnded() {\n    const {winningEndpoints, stepNumber, moves} = this.state;\n    return winningEndpoints.length > 0 && stepNumber === moves.length;\n  }\n\n  handleClick(move) {\n    const {moves, stepNumber} = this.state,\n          movesUntilStep = moves.slice(0, stepNumber);\n    if (this.isGameEnded() || movesUntilStep.includes(move)) return;\n    this.setState({\n      moves: [...movesUntilStep, move],\n      winningEndpoints: [],\n      stepNumber: stepNumber + 1,\n    }, this.checkWin);\n  }\n\n  jumpTo(stepNumber) { this.setState({stepNumber}); }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            boardDimensions={this.props.boardDimensions}\n            squares={util.board.getSquaresFromMoves(\n                      this.props.boardDimensions,\n                      this.state.stepNumber,\n                      this.state.moves,\n                    )}\n            onClick={i => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <Status\n            isGameEnded={this.isGameEnded()}\n            isStepNumberEven={this.state.stepNumber % 2 === 0}\n          />\n          <Steps\n            moves={this.state.moves}\n            onClick={stepNumber => this.jumpTo(stepNumber)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game\n    boardDimensions={{\n      width: 5,\n      height: 7,\n    }}\n    numElementsRequiredForWin={{\n      horizontal: 3,\n      vertical: 3,\n      diagonal: 3,\n    }}\n  />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}