{"version":3,"sources":["Board.js","components.js","arrayUtils.js","Game.js","index.js"],"names":["Square","square","onClick","className","Row","rowIndex","row","addMove","key","map","colIndex","Board","squares","Status","gameEnded","stepNumberEven","Step","sliceIndex","jumpTo","Steps","moves","_","sumArrays","a1","a2","multiplier","e","i","Game","props","validateProps","numElementsRequiredForWin","antiDiagonal","diagonal","move","setState","stepNumber","slice","array","some","subArray","every","push","winningEndpoints","getWinningEndpoints","length","newStepNumber","getNewSquaresAfterJump","boardDimensions","width","height","state","Array","from","fill","Math","max","Object","values","min","RangeError","delta","target","lastMove","player","endpoints","numElements","point","directionDeltas","horizontal","vertical","direction","getWinningEndpointsForDirection","previousStepNumber","beginIndex","endIndex","movesToAdd","xIsNext","movesToRemove","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb2ad3a5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Square = ({square, onClick}) => (\n  <button className=\"square\" onClick={onClick}>\n    {square}\n  </button>\n);\n\nconst Row = ({rowIndex, row, addMove}) => (\n  <div className=\"board-row\" key={rowIndex}>\n    {row.map((square, colIndex) => (\n      <Square\n        {...{\n          key: colIndex,\n          square,\n          onClick: () => addMove([rowIndex, colIndex]),\n        }}\n      />\n    ))}\n  </div>\n);\n\nconst Board = ({squares, addMove}) => (\n  <div>\n    {squares.map((row, rowIndex) => (\n      <Row\n        {...{\n          key: rowIndex,\n          rowIndex,\n          row,\n          addMove,\n        }}\n      />\n    ))}\n  </div>\n);\n\nexport default Board;\n","import React from 'react';\n\nconst Status = ({gameEnded, stepNumberEven}) => (\n  <div>\n    {\n      gameEnded\n      ?\n      `Winner: ${stepNumberEven ? 'O' : 'X'}`\n      :\n      `Next player: ${stepNumberEven ? 'X' : 'O'}`\n    }\n  </div>\n)\n\nconst Step = ({sliceIndex, jumpTo}) => (\n  <li key={sliceIndex}>\n    <button onClick={() => jumpTo(sliceIndex)}>\n      {\n        sliceIndex\n        ?\n        'Go to move #' + sliceIndex\n        :\n        'Go to game start'\n      }\n    </button>\n  </li>\n)\n\nconst Steps = ({moves, jumpTo}) => {\n  // Prepend an invalid, dummy move to symbolize the game start.\n  //\n  // WARNING Using 'moves.unshift` instead of the spread operator will\n  // actually change the contents of the moves in the game's state. The\n  // reason is that objects are passed by reference in JavaScript.\n  moves = [[-1,-1], ...moves];\n  return (\n    <ol>\n      {moves.map((_, sliceIndex) => (\n        <Step\n          key={sliceIndex}\n          {...{sliceIndex, jumpTo}}\n        />\n      ))}\n    </ol>\n  );\n}\n\nexport {Status, Steps}\n","function sumArrays(a1, a2, multiplier) {\n  return a1.map((e, i) => e + multiplier * a2[i]);\n}\n\nfunction arrayOfArraysIncludesArray(arrayOfArrays, array) {\n  return arrayOfArrays.some(\n           subArray => array.every((e, i) => e === subArray[i])\n         );\n}\n\nexport { sumArrays, arrayOfArraysIncludesArray }\n","import React from 'react';\nimport Board from 'Board';\nimport {Status, Steps} from 'components';\nimport {\n  sumArrays,\n  arrayOfArraysIncludesArray,\n} from 'arrayUtils';\n\nclass Game extends React.Component {\n\n  static validateProps(props) {\n    const {numElementsRequiredForWin, boardDimensions} = props;\n    if (\n      Math.max(...Object.values(numElementsRequiredForWin))\n      >\n      Math.min(...Object.values(boardDimensions))\n    ) {\n      throw new RangeError(\"Number of elements required to win \" +\n                           \"cannot be bigger than board dimensions.\");\n    }\n  }\n\n  static getWinningEndpointsForDirection(\n    delta,\n    target,\n    lastMove,\n    squares,\n  ) {\n    const player = squares[lastMove[0]][lastMove[1]],\n          endpoints = [lastMove, lastMove];\n    let numElements = 1;\n    for (let i = 0; i < 2; i++) {\n      const multiplier = (i === 0 ? -1 : 1);\n      let point = sumArrays(lastMove, delta, multiplier);\n      while (squares[point[0]]?.[point[1]] === player) {\n        numElements++;\n        endpoints[i] = point;\n        point = sumArrays(point, delta, multiplier);\n      }\n    }\n    if (numElements === target) return endpoints;\n  }\n\n  static getWinningEndpoints(\n    lastMove,\n    squares,\n    numElementsRequiredForWin\n  ) {\n    const directionDeltas = {\n            horizontal: [0, 1],\n            vertical: [1, 0],\n            diagonal: [1, 1],\n            antiDiagonal: [-1, 1],\n          },\n          winningEndpoints = [];\n    for (const direction in directionDeltas) {\n      const delta = directionDeltas[direction],\n            target = numElementsRequiredForWin[direction],\n            endpoints = Game.getWinningEndpointsForDirection(\n                          delta,\n                          target,\n                          lastMove,\n                          squares,\n                        );\n      if (endpoints) winningEndpoints.push(endpoints);\n    }\n    return winningEndpoints;\n  }\n\n  static getNewSquaresAfterJump(\n    moves,\n    previousStepNumber,\n    stepNumber,\n    squares\n  ) {\n    const beginIndex = previousStepNumber,\n            endIndex = stepNumber;\n    squares = [...squares];\n    if (endIndex > beginIndex) {\n      const movesToAdd = moves.slice(beginIndex, endIndex);\n      let xIsNext = beginIndex % 2 === 0;\n      for (const move of movesToAdd) {\n        squares[move[0]][move[1]] = xIsNext ? 'X' : 'O';\n        xIsNext = !xIsNext;\n      }\n    } else {\n      const movesToRemove = moves.slice(endIndex, beginIndex);\n      for (const move of movesToRemove) squares[move[0]][move[1]] = null;\n    }\n    return squares;\n  }\n\n  constructor(props) {\n    Game.validateProps(props);\n    props.numElementsRequiredForWin.antiDiagonal\n      = props.numElementsRequiredForWin.diagonal;\n    super(props);\n    const {boardDimensions: {width, height}} = this.props;\n    this.state = {\n      // Essential state. The elements below cannot be derived from\n      // other state elements.\n      //\n      // 'moves' is an array of tuples. Each tuple is of form [rowIndex,\n      // colIndex], with the topmost row and leftmost column having\n      // indices 0.\n      moves: [],\n      stepNumber: 0,\n      // Derived state. The elements below can be derived using\n      // essential state elements.\n      squares: Array.from(Array(height), () => Array(width).fill(null)),\n      winningEndpoints: [],\n      gameEnded: false,\n    };\n  }\n\n  addMove = move => {\n    this.setState(({moves, stepNumber, squares, gameEnded}) => {\n      if (gameEnded) return;\n      moves = moves.slice(0, stepNumber);\n      if (arrayOfArraysIncludesArray(moves, move)) return;\n      // I think I need to copy 'squares' to prevent changing game state.\n      squares = [...squares];\n      squares[move[0]][move[1]] = stepNumber % 2 === 0 ? 'X' : 'O';\n      moves.push(move);\n      stepNumber++;\n      const winningEndpoints = Game.getWinningEndpoints(\n        move,\n        squares,\n        this.props.numElementsRequiredForWin,\n      );\n      return {\n        moves,\n        stepNumber,\n        squares,\n        winningEndpoints,\n        gameEnded: winningEndpoints.length > 0,\n      }\n    });\n  }\n\n  jumpTo = newStepNumber => {\n    this.setState(({moves, stepNumber, squares, winningEndpoints}) => ({\n      stepNumber: newStepNumber,\n      squares: Game.getNewSquaresAfterJump(\n                moves,\n                stepNumber,\n                newStepNumber,\n                squares\n              ),\n      gameEnded: winningEndpoints.length > 0 && newStepNumber === moves.length\n    }));\n  }\n\n  render() {\n    const {\n      state: {\n        moves,\n        squares,\n        gameEnded,\n      },\n      addMove,\n      jumpTo\n    } = this;\n    const stepNumberEven = this.state.stepNumber % 2 === 0;\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board {...{squares, addMove}} />\n        </div>\n        <div className=\"game-info\">\n          <Status {...{gameEnded, stepNumberEven}} />\n          <Steps {...{moves, jumpTo}} />\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from 'Game';\nimport 'index.css';\n\nReactDOM.render(\n  <Game\n    boardDimensions={{\n      width: 5,\n      height: 7,\n    }}\n    numElementsRequiredForWin={{\n      horizontal: 3,\n      vertical: 3,\n      diagonal: 3,\n    }}\n  />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}